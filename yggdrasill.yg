grammar! yg {"*.yg", "*.grammar"}





//? 
//* grammar tsg
//* grammar tsg {"*.tsg", }
GrammarStatement = Grammar (id <- Id) _grammar_exts? Eos?
_grammar_exts   _= "{" ~ interleave(String, ",", trailing = true)? ~ "}"
Grammar          = "grammar!"


//? `fragment` means that this file cannot build grammar, it can only be imported.
//? `id` represents the default name when importing, which can be changed by `as`.
//* fragment ascii
FragmentStatement = _fragment (id <- Id)
Fragment          = "fragment!"

//?
//* ignores /\/
//* ignores [comment, commentInline]
IgnoresStatement = 
    | _ignores any 
    | _ignores "[" interleave(String, ",")? "]"
Ignores         = "ignores"




// Identifier
Id = ("_" | XID_START) XID_CONTINUE


value _= String | Regex |




InlineAssignment =  

KeywordAssignment = Id

Eos = ";"



fn! interleave(rule: rule, sep, trailing = false) {
    seq(rule, repeat(seq(",", rule)))
}



Boolean = "true" | "false"

