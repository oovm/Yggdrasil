grammar Yggdrasil {
    extension: ["*.yg", "*.ygg", "*.grammar"]
    // keep dead code?
    dead_code: true
}

// right now, first rule will become entry point
#entry class Program {
    Statements*
}

union Statements {
    | GrammarStatement
    | ClassStatement
    | UnionStatement
    | MacroStatement
}
// =================================================================================================
class GrammarStatement {
    Identifier
}
class KW_GRAMMAR {
    "grammar"
}
// =================================================================================================
class KW_IMPORT {
    "import" | "using"
}

// =================================================================================================
class ClassStatement {
    ^KW_CLASS
}
class KW_CLASS {
    "class" | "struct" | "rule"
}

// =================================================================================================
class UnionStatement {

}
class KW_UNION {
    "union" | "enum"
}
// =================================================================================================
class MacroStatement {

}
class KW_MACRO {
    "define" | "def" | "function" | "fun" | "fn" | "macro"
}


//* grammar tsg
//* grammar tsg {"*.tsg", }
class GrammarStatement {
    "grammar" Identifier _GrammarExts? EOS?
}


class _GrammarExts {
    "{" @interval(extensions:String, ",", true)? "}"
}

class ImportStatement {
    | "import" (path:StringLiteral) ("as" id)?       #FromPath
    | "import" (path:StringLiteral) _ImportSelected  #FromPathItems
}

class _ImportSelected {
    '{' @join(items:ImportItem, ',')? '}'
}

class ImportItem {
    symbol:Identifier (@case_insensitive("as") alias:Identifier)?
}

union climb Expression {
    | x:Self y:Self       #Concat
    | x:Self '~' y:Self   #ConcatSoft
    | x:Self '|' y:Self   #Choice
    | '(' '|'? x:Self ')' #Group
    | x:_Atom             #Atom
}

class _TagName {
    "#" (name:Identifier) (mode:[!_^]) (name:Identifier)
}

// `_` inline a item even if it not mark as automatic inline
union _Atom {
    | Identifier
    | String
    | Integer    #Integer
    | Decimal
    | Regex
    | MacroCall
}


class Boolean: String {
    "true" | "false"
}

class Regex {

}

class MacroCall {

}


class String {

}
// =================================================================================================
class Modifiers {

}


#atomic class Identifier -> str {
    ("_" | XID_START) XID_CONTINUE*
}

// =================================================================================================
class ignore Whitespace {

}

#ignore class WhiteSpace {
    UNICODE_WHITESPACE
}

#ignore class CommentLine {
"//" (!\n ANY)*
}

#parser(crate::utils::comment_block)
#ignore class CommentBlock {

}

