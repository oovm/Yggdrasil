Rule {
    name: "program",
    type: "Program",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Unary {
            base: ExpressionNode {
                base: statement,
            },
            operations: [
                RepeatsNonnull+,
                ^MarkSymbol,
            ],
        },
    },
    range: Range {
        start: Position {
            line: 9,
            character: 0,
        },
        end: Position {
            line: 9,
            character: 21,
        },
    },
}
Rule {
    name: "statement",
    type: "Statement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                base: grammar,
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: id,
                    },
                    operations: [
                        ^MarkSymbol,
                    ],
                },
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: _grammar_exts,
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: eos,
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: Range {
        start: Position {
            line: 16,
            character: 0,
        },
        end: Position {
            line: 27,
            character: 58,
        },
    },
}
Rule {
    name: "fragment_statement",
    type: "FragmentStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                base: fragment,
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: id,
                    },
                    operations: [
                        ^MarkSymbol,
                    ],
                },
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: eos,
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
        ],
    },
    range: Range {
        start: Position {
            line: 34,
            character: 0,
        },
        end: Position {
            line: 34,
            character: 43,
        },
    },
}
Rule {
    name: "import_statement",
    type: "ImportStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                base: import,
            },
            ExpressionNode {
                field: "path",
                base: string,
            },
            ExpressionNode {
                base: Choice[
                    ExpressionNode {
                        base: Unary {
                            base: ExpressionNode {
                                base: Concat[
                                    ExpressionNode {
                                        base: as,
                                    },
                                    ExpressionNode {
                                        base: Unary {
                                            base: ExpressionNode {
                                                base: id,
                                            },
                                            operations: [
                                                ^MarkSymbol,
                                            ],
                                        },
                                    },
                                ],
                            },
                            operations: [
                                Optional?,
                            ],
                        },
                    },
                    ExpressionNode {
                        base: import,
                    },
                ],
            },
            ExpressionNode {
                field: "path",
                base: string,
            },
            ExpressionNode {
                base: "{",
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: 0,
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            ExpressionNode {
                base: "}",
            },
        ],
    },
    range: Range {
        start: Position {
            line: 38,
            character: 0,
        },
        end: Position {
            line: 41,
            character: 84,
        },
    },
}
Rule {
    name: "import_item",
    type: "ImportItem",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                field: "id",
                base: id,
            },
            ExpressionNode {
                base: as,
            },
            ExpressionNode {
                field: "alias",
                base: id,
            },
        ],
    },
    range: Range {
        start: Position {
            line: 42,
            character: 0,
        },
        end: Position {
            line: 42,
            character: 51,
        },
    },
}
Rule {
    name: "ignores_statement",
    type: "IgnoresStatement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                base: ignores,
            },
            ExpressionNode {
                base: Choice[
                    ExpressionNode {
                        base: Unary {
                            base: ExpressionNode {
                                base: id,
                            },
                            operations: [
                                ^MarkSymbol,
                            ],
                        },
                    },
                    ExpressionNode {
                        base: ignores,
                    },
                ],
            },
            ExpressionNode {
                base: "{",
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: 0,
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            ExpressionNode {
                base: "}",
            },
        ],
    },
    range: Range {
        start: Position {
            line: 48,
            character: 0,
        },
        end: Position {
            line: 50,
            character: 64,
        },
    },
}
Rule {
    name: "expression",
    type: "Expression",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: true,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                base: "(",
            },
            ExpressionNode {
                base: Unary {
                    base: ExpressionNode {
                        base: "|",
                    },
                    operations: [
                        Optional?,
                    ],
                },
            },
            ExpressionNode {
                base: expression,
            },
            ExpressionNode {
                base: ")",
            },
        ],
    },
    range: Range {
        start: Position {
            line: 53,
            character: 0,
        },
        end: Position {
            line: 60,
            character: 42,
        },
    },
}
Rule {
    name: "unary_suffix",
    type: "UnarySuffix",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 61,
            character: 0,
        },
        end: Position {
            line: 62,
            character: 49,
        },
    },
}
Rule {
    name: "unary_prefix",
    type: "UnaryPrefix",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 63,
            character: 0,
        },
        end: Position {
            line: 64,
            character: 49,
        },
    },
}
Rule {
    name: "concat_expression",
    type: "ConcatExpression",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 66,
            character: 0,
        },
        end: Position {
            line: 67,
            character: 41,
        },
    },
}
Rule {
    name: "or_expression",
    type: "OrExpression",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 69,
            character: 0,
        },
        end: Position {
            line: 70,
            character: 42,
        },
    },
}
Rule {
    name: "variant_tag",
    type: "VariantTag",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 71,
            character: 0,
        },
        end: Position {
            line: 71,
            character: 62,
        },
    },
}
Rule {
    name: "label_expression",
    type: "LabelExpression",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: 0,
    },
    range: Range {
        start: Position {
            line: 74,
            character: 0,
        },
        end: Position {
            line: 75,
            character: 44,
        },
    },
}
Rule {
    name: "b",
    type: "B",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Choice[
            ExpressionNode {
                base: "*",
            },
            ExpressionNode {
                base: "+",
            },
        ],
    },
    range: Range {
        start: Position {
            line: 79,
            character: 9,
        },
        end: Position {
            line: 81,
            character: 9,
        },
    },
}
Rule {
    name: "data",
    type: "Data",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: _atom,
    },
    range: Range {
        start: Position {
            line: 85,
            character: 0,
        },
        end: Position {
            line: 85,
            character: 12,
        },
    },
}
Rule {
    name: "atom",
    type: "Atom",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Choice[
            ExpressionNode {
                base: Choice[
                    ExpressionNode {
                        base: Choice[
                            ExpressionNode {
                                base: Choice[
                                    ExpressionNode {
                                        base: id,
                                    },
                                    ExpressionNode {
                                        base: string,
                                    },
                                ],
                            },
                            ExpressionNode {
                                base: unsigned,
                            },
                        ],
                    },
                    ExpressionNode {
                        base: regex,
                    },
                ],
            },
            ExpressionNode {
                base: macro_call,
            },
        ],
    },
    range: Range {
        start: Position {
            line: 86,
            character: 0,
        },
        end: Position {
            line: 91,
            character: 16,
        },
    },
}
Rule {
    name: "macro_call",
    type: "MacroCall",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        base: Concat[
            ExpressionNode {
                field: "name",
                base: 0,
            },
            ExpressionNode {
                base: "(",
            },
            ExpressionNode {
                base: 0,
            },
            ExpressionNode {
                base: 0,
            },
        ],
    },
    range: Range {
        start: Position {
            line: 97,
            character: 0,
        },
        end: Position {
            line: 104,
            character: 24,
        },
    },
}
Rule {
    name: "identifier",
    type: "Identifier",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Concat[
            ExpressionNode {
                base: Choice[
                    ExpressionNode {
                        base: "_",
                    },
                    ExpressionNode {
                        base: XID_START,
                    },
                ],
            },
            ExpressionNode {
                base: XID_CONTINUE,
            },
        ],
    },
    range: Range {
        start: Position {
            line: 105,
            character: 0,
        },
        end: Position {
            line: 105,
            character: 46,
        },
    },
}
Rule {
    name: "integer",
    type: "Integer",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        inline_token: true,
        base: Unary {
            base: ExpressionNode {
                base: _sign,
            },
            operations: [
                Optional?,
            ],
        },
    },
    range: Range {
        start: Position {
            line: 107,
            character: 0,
        },
        end: Position {
            line: 107,
            character: 20,
        },
    },
}
