    impl {{ node_name }} {
        #[inline]
        pub fn consume(state: YState) -> YResult<Self> {
            let (state, {{ name_lower }}) = state
                .begin_choice()
{%- for item in branches %}
                .maybe(Self::{{ item.consume_lower }})
{%- endfor %}
                .end_choice()?;
            state.finish({{ name_lower }})
        }
{%- for item in branches %}
        #[inline(always)]
        fn {{ item.consume_lower }}(state: YState) -> YResult<Self> {
            let (state, {{ item.branch_lower }}) = {{ item.target_node }}::consume(state)?;
            state.finish(Self::{{ item.branch_upper }}(Box::new({{ item.branch_lower }})))
        }
{%- endfor %}
    }
{% if derive_debug %}
    impl Debug for {{ node_name }} {
        fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
            match self {
{%- for item in branches %}
                {{ node_name }}::{{ item.branch_upper }}(branch) => Debug::fmt(branch, f),
{%- endfor %}
            }
        }
    }
{% endif %}