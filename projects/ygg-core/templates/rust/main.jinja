#![allow(dead_code, unused_imports, non_camel_case_types)]
#![doc = include_str!("readme.md")]

use yggdrasil_rt::*;
use std::sync::OnceLock;

{%- set rules = self.grammar.rules() %}
{%- set rule_name = self.grammar.rule_name() %}
{%- set language_name = self.grammar.language_name() %}

type Input<'i> = Box<State<'i, {{ rule_name }}>>;
type Output<'i> = Result<Box<State<'i, {{ rule_name }}>>, Box<State<'i, {{ rule_name}}>>>;

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct {{ language_name }} {}

#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum {{ rule_name }} {
{%- for rule in rules.iter() %}
    {{ rule.safe_rule_name() }},
{%- endfor %}
    /// Label for text literal
    IgnoreText,
    /// Label for regex literal
    IgnoreRegex,
}

impl YggdrasilRule for {{ rule_name }} {
    fn all_rules() -> &'static [Self] {
        &[
{%- for rule in rules.iter() %}
            Self::{{ rule.safe_rule_name() }},
{%- endfor %}
        ]
    }

    fn is_ignore(&self) -> bool {
{%- if self.grammar.ignore_rules_empty() %}
        false
{%- else %}
        matches!(self, {{ self.grammar.ignore_rule_pattern() }})
{% endif %}
    }
}

