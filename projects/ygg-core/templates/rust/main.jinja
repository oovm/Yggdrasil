#![allow(dead_code, unused_imports, non_camel_case_types)]

use yggdrasil_rt::*;

type Input<'i> = Box<State<'i, {{ self.rule_name()}}>>;
type Output<'i> = Result<Box<State<'i, {{ self.language_name() }}Rule>>, Box<State<'i, {{ self.rule_name()}}>>>;

#[derive(Default)]
pub struct {{ self.language_name() }} {}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum {{ self.rule_name()}} {
{%- for rule in self.rules() %}
    {{ rule.safe_rule_name() }},
{%- endfor %}
}

impl YggdrasilRule for {{ self.rule_name()}} {
    fn all_rules() -> &'static [Self] {
        &[
{%- for rule in self.rules() %}
            Self::{{ rule.safe_rule_name() }},
{%- endfor %}
        ]
    }

    fn is_ignore(&self) -> bool {
        matches!(self, {{ self.ignore_rules() }})
    }
}

impl YggdrasilParser for {{ self.language_name() }} {
    type Rule = {{ self.rule_name() }};
    #[allow(clippy::almost_complete_range)]
    fn parse(input: &str, rule: {{ self.rule_name() }}) -> OutputResult<{{ self.rule_name()}}> {
        state(input, |state| match rule {
{%- for rule in self.rules() %}
            {{ self.rule_name() }}::{{ rule.safe_rule_name() }} => {{ rule.parser_name() }}(state),
{%- endfor %}
        })
    }
}

{%- for rule in self.rules() %}
#[inline]
fn {{ rule.parser_name() }}(state: Input) -> Output {
    state.rule({{ self.rule_name() }}::{{ rule.safe_rule_name() }}, |s| {
        // 
        value(s)
    })
}
{%- endfor %}

fn parse_ignore(state: Input) -> Output {
    value(state)
}
