use super::*;


{% for rule in self.grammar.rules() %}
impl YggdrasilNode for {{ rule.node_name() }} {
    type Rule = {{ self.grammar.rule_name() }};

    fn get_range(&self) -> Option<Range<usize>> {
{%- if rule.is_class() %}
        Some(Range { start: self.span.start as usize, end: self.span.end as usize })
{%- else %}
        match self {
            _ => unreachable!()
        }
{%- endif %}
    }
    fn from_cst(pair: TokenPair<Self::Rule>) -> Result<Self, YggdrasilError<Self::Rule>> {
{%- if rule.is_class() %}
        let _span = pair.as_span();
        let _tree = pair.into_inner();
        let object_pair = _tree.take_tagged::<ObjectPairNode>("object_pair")?;
        Ok(Self {
            object_pair,
            span: Range { start: _span.start() as {{ self.config.range_type }}, end: _span.end() as {{ self.config.range_type }} }
        })
{%- else %}
        todo!()
{%- endif %}
    }
}
{%- endfor %}

