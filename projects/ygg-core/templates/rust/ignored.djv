    impl IgnoredNode {
        #[inline]
        pub fn consume(state: YState) -> YResult<()> {
            let (state, _) = state.match_repeats(|state| {
                state
                    .begin_choice()
{%- for item in items %}
                    .maybe(Self::{{ item.consume }})
{%- endfor %}
                    .end_choice()
            })?;
            state.finish(())
        }
{%- for item in items %}
        #[inline(always)]
        fn {{ item.consume }}(state: YState) -> YResult<()> {
            let (state, _) = {{ item.class }}::consume(state)?;
            state.finish(())
        }
{%- endfor %}
    }