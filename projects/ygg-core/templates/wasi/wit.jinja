package yggdrasil: {{ self.language_id() }};

world host {
    export ast;
}

interface ast {
    use peg: core/types.{parse-error};
    use peg: core/cst.{syntax-node};

    /// Token type of the language
    enum {{ self.language_id() }}-token {
{%- for (variant, _) in self.token_type() %}
        %{{ variant }},
{%- endfor %}
        %hidden-text,
    }

    variant {{ self.language_id() }}-type {
{%- for (variant, class) in self.token_type() %}
        %{{ variant }}({{ self.language_id() }}-{{ class }}-node),
{%- endfor %}
    }

{%- for variant in self.variants() %}
    // AST Types
    variant {{ self.language_id() }}-{{ self.rule_name(variant) }}-node {
{%- for (item, class) in self.variant_items(variant) %}
        %{{ item }}({{ self.language_id() }}-{{ class }}-node),
{%- endfor %}
    }
{%- endfor %}

{%- for record in self.records() %}
    resource {{ self.language_id() }}-{{ self.rule_name(record) }}-node {
        ctor: static func(super: syntax-node) -> result<{{ self.language_id() }}-{{ self.rule_name(record) }}-node, parse-error>;
        parse-string: static func(text: string, offset: u32) -> result<{{ self.language_id() }}-{{ self.rule_name(record) }}-node, parse-error>;
        get-text: func() -> string;
    }
{%- endfor %}
}

interface visitor {

}

interface listener {

}
