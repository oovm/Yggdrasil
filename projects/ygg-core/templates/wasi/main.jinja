#![allow(dead_code, unused_imports, non_camel_case_types)]
#![allow(missing_docs, rustdoc::missing_crate_level_docs)]
#![allow(clippy::unnecessary_cast)]
#![doc = include_str!("readme.md")]

mod parse_cst;
mod parse_ast;

use core::str::FromStr;
use std::{borrow::Cow, ops::Range, sync::OnceLock};
use wasi_yggdrasil::{state, OutputResult, Regex, State, YggdrasilParser, YggdrasilRule};
use wasi_yggdrasil::exports::peg::core::cst::SyntaxNode;

{%- set rules = self.grammar.rules() %}

type Input<'i> = Box<State<'i, {{ self.token_name() }}>>;
type Output<'i> = Result<Box<State<'i, {{ self.token_name() }}>>, Box<State<'i, {{ self.token_name() }}>>>;

#[doc = include_str!("railway.min.svg")]
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Ord, PartialOrd, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct {{ self.host_name() }} {}

impl YggdrasilRule for {{ self.token_name() }} {
    fn is_ignore(&self) -> bool {
{%- if self.grammar.ignore_rules_empty() %}
        false
{%- else %}
        matches!(self, {{ self.grammar.ignore_rule_pattern() }})
{%- endif %}
    }

    fn get_style(&self) -> &'static str {
        match self {
{%- for rule in rules.iter() %}
            Self::{{ rule.name.text|safe_rust_id }} => "",
{%- endfor %}
            _ => "",
        }
    }
}

{%- for rule in self.grammar.classes() %}
#[derive(Clone, Debug, Hash)]
pub struct {{ self.node_native(rule) }} {
    node: SyntaxNode,
}
{%- endfor %}

