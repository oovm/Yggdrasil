use super::*;

{%- set rules = self.grammar.rules() %}


pub(super) fn parse_cst(input: &str, rule: {{ self.token_name() }}) -> OutputResult<{{ self.token_name() }}> {
    state(input, |state| match rule {
{%- for rule in rules.iter() %}
        {{ self.token_name() }}::{{ rule.name.text|safe_rust_id }} => {{ rule.parser_name() }}(state),
{%- endfor %}
        {{ self.token_name() }}::HiddenText => unreachable!(),
    })
}

{%- for rule in rules.iter() %}
#[inline]
fn {{ rule.parser_name() }}(state: Input) -> Output {
    state.rule({{ self.token_name() }}::{{ rule.name.text|safe_rust_id }}, |s| {
        {{ rule.parser_expression() }}
    })
}
{%- endfor %}

/// All rules ignored in ast mode, inline is not recommended
fn builtin_ignore(state: Input) -> Output {
{%- if self.grammar.ignore_rules_empty() %}
    Ok(state)
{%- else %}
    state.repeat(0..u32::MAX, |s| {
        {{ self.grammar.ignore_rule_match() }}
    })
{% endif %}
}

fn builtin_any(state: Input) -> Output {
    state.rule({{ self.token_name() }}::HiddenText, |s| s.match_char_if(|_| true))
}

fn builtin_text<'i>(state: Input<'i>, text: &'static str, case: bool) -> Output<'i> {
    state.rule({{ self.token_name() }}::HiddenText, |s| s.match_string(text, case))
}

fn builtin_regex<'i, 'r>(state: Input<'i>, regex: &'r Regex) -> Output<'i> {
    state.rule({{ self.token_name() }}::HiddenText, |s| s.match_regex(regex))
}