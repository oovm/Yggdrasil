use wasi_yggdrasil::exports::peg::core::cst::SyntaxNode;
use crate::exports::yggdrasil::{{ self.language_id() }}::ast::*;
use super::*;

#[automatically_derived]
impl Guest for {{ self.host_name() }} {
{%- for rule in self.grammar.classes() %}
    type {{ self.node_wasi(rule) }} = {{ self.node_native(rule) }};
{%- endfor %}
}

{%- for rule in self.grammar.classes() %}
{%- if rule.is_class() %}
#[automatically_derived]
impl {{ self.node_trait(rule) }} for {{ self.node_native(rule) }} {
    fn ctor(super_: SyntaxNode) -> Result<{{ self.node_wasi(rule) }}, ParseError> {
        Ok({{ self.node_wasi(rule) }}::new(Self { node: super_ }))
    }
    fn parse_string(text: String, offset: u32) -> Result<{{ self.node_wasi(rule) }}, ParseError> {
        let input = Rc::from(text);
        let language = NativeLanguage { name: "json5", glob: &["*.json5"] };
        let mut tree = crate::wit::parse_cst::parse_cst(&input, Json5Token::Object)?;
        Ok({{ self.node_wasi(rule) }}::new(Self { node: SyntaxNode::new(NativeSyntaxData::new(input, tree.next().unwrap(), &language))? }))
    }
    fn get_text(&self) -> String {
        self.node.get_text()
    }
}
{%- endif %}
{%- endfor %}


