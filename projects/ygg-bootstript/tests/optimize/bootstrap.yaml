Rule {
    name: "program",
    type: "Program",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node: RefinedUnary {
            base: ExpressionNode {
                node: RefinedUnary {
                    base: ExpressionNode {
                        node: Identifier {
                            data: "statement",
                            range: Range {
                                start: Position {
                                    line: 2,
                                    character: 11,
                                },
                                end: Position {
                                    line: 2,
                                    character: 20,
                                },
                            },
                        },
                    },
                    prefix: [],
                    suffix: [
                        "*",
                    ],
                },
            },
            prefix: [
                "^",
            ],
            suffix: [],
        },
    },
    range: Range {
        start: Position {
            line: 2,
            character: 0,
        },
        end: Position {
            line: 2,
            character: 21,
        },
    },
}
Rule {
    name: "statement",
    type: "Statement",
    force_inline: false,
    already_inline: false,
    eliminate_unmarked: false,
    eliminate_unnamed: false,
    expression: ExpressionNode {
        node: ChoiceExpression[
            ExpressionNode {
                node: ChoiceExpression[
                    ExpressionNode {
                        node: Identifier {
                            data: "grammar_statement",
                            range: Range {
                                start: Position {
                                    line: 5,
                                    character: 6,
                                },
                                end: Position {
                                    line: 5,
                                    character: 23,
                                },
                            },
                        },
                    },
                    ExpressionNode {
                        node: Identifier {
                            data: "fragment_statement",
                            range: Range {
                                start: Position {
                                    line: 6,
                                    character: 6,
                                },
                                end: Position {
                                    line: 6,
                                    character: 24,
                                },
                            },
                        },
                    },
                ],
            },
            ExpressionNode {
                node: Identifier {
                    data: "assign_statement",
                    range: Range {
                        start: Position {
                            line: 7,
                            character: 6,
                        },
                        end: Position {
                            line: 7,
                            character: 22,
                        },
                    },
                },
            },
        ],
    },
    range: Range {
        start: Position {
            line: 4,
            character: 0,
        },
        end: Position {
            line: 7,
            character: 22,
        },
    },
}
