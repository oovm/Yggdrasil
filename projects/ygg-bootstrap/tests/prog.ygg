class entry Program {
    statements:Statement
}

union Statement {
    | ^DefineStatement EOS?
    | ^EmptyStatement
}

class EmptyStatement {
    EOS
}

class MacroCalls {
    _MacroCall+
}
class _MacroCall {
    | '#' macros:Macro
    | '#' '[' macros:Macro ']'
}

class Macro {
    id:Identifier ('(' args:ArgumentValue ')')?
}
union ArgumentValue {

}



class DefineStatement {
    MacroCalls Define modifiers:Modifiers symbol:Identifier arguments:Arguments? type:Typing? '{' body:Choice '}'
}

class Define -> string {
    "class" | "union" | "struct" | "enum"
}
class Arguments {

}
class Typing {
}

union Choice {

}



class Modifiers {
    _Modifier+
}
class _Modifier {
    id:Identifier !('{'|'('|':'|'->'|';')
}
class Identifier {
    (XID_START | '_') XID_CONTINUE*
}

class EOS -> char {
    ';'
}