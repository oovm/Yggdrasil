// This file was generated by Peginator v0.2.0
// Hash of the grammar file: F050AB1F5BCBB9F5EC7372903902906A61C2E96439D6A534022923091E7C15A0
// Any changes to it will be lost on regeneration

#[derive(Debug, Clone)]
pub struct Program {
    pub statement: Vec<Statement>,
    pub position: std::ops::Range<usize>,
}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone)]
pub enum Statement {
    DefineStatement(DefineStatement),
    EmptyStatement(EmptyStatement),
}
#[derive(Debug, Clone)]
pub struct EmptyStatement;
#[derive(Debug, Clone)]
pub struct DefineStatement {
    pub define: DEFINE,
    pub modifiers: Modifiers,
    pub symbol: Identifier,
    pub position: std::ops::Range<usize>,
}
pub type DEFINE = String;
pub type EOS = String;
#[derive(Debug, Clone)]
pub struct Modifiers {
    pub id: Vec<Identifier>,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct Identifier {
    pub identifier: IDENTIFIER,
    pub position: std::ops::Range<usize>,
}
pub type IDENTIFIER = String;
impl peginator_generated::PegParser for Program {
    fn parse_advanced<T: peginator_generated::ParseTracer>(s: &str, settings: &peginator_generated::ParseSettings) -> Result<Self, peginator_generated::ParseError> {
        Ok(peginator_generated::parse_Program(peginator_generated::ParseState::new(s, settings), T::new(), &mut Default::default())?.result)
    }
}
#[allow(non_snake_case, unused_variables, unused_imports, unused_mut)]
mod peginator_generated {
    use super::*;
    use peginator::runtime::*;
    pub use peginator::runtime::{IndentedTracer, ParseError, ParseSettings, ParseState, ParseTracer, PegParser};
    #[derive(Default)]
    pub struct ParseCache<'a> {
        _please_dont_complain: std::marker::PhantomData<&'a ()>,
    }
    mod Program_impl {
        use super::*;
        mod part_0 {
            use super::*;
            mod closure {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                    let ok_result = parse_Statement(state, tracer, cache)?;
                    Ok(ok_result.map(|result| Parsed { statement: vec![result] }))
                }
                pub struct Parsed {
                    pub statement: Vec<Statement>,
                }
            }
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let mut statement: Vec<Statement> = Vec::new();
                let mut state = state;
                let mut farthest_error: Option<ParseError> = None;
                loop {
                    match closure::parse(state.clone(), tracer, cache) {
                        Ok(ParseOk {
                            result,
                            state: new_state,
                            farthest_error: new_farthest_error,
                        }) => {
                            statement.extend(result.statement);
                            state = new_state;
                            farthest_error = combine_errors(farthest_error, new_farthest_error);
                        }
                        Err(err) => {
                            farthest_error = combine_errors(farthest_error, Some(err));
                            break;
                        }
                    }
                }
                Ok(ParseOk { result: Parsed { statement }, state, farthest_error })
            }
            pub struct Parsed {
                pub statement: Vec<Statement>,
            }
        }
        mod part_1 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                if state.is_empty() { Ok(ParseOk { result: Parsed, state, farthest_error: None }) } else { Err(state.report_error(ParseErrorSpecifics::ExpectedEoi)) }
            }
            pub struct Parsed;
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            let result = match part_0::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                    result
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            };
            let mut statement = result.statement;
            match part_1::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result: _,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            }
            Ok(ParseOk { result: Parsed { statement }, state, farthest_error })
        }
        pub struct Parsed {
            pub statement: Vec<Statement>,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::Program> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|r, new_state| super::Program {
                statement: r.statement,
                position: state.range_until(new_state),
            }))
        }
    }
    #[inline]
    pub(super) fn parse_Program<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Program> {
        tracer.run_traced("Program", state, |state, tracer| Program_impl::rule_parser(state, tracer, cache))
    }
    mod Statement_impl {
        use super::*;
        mod choice_0 {
            use super::*;
            mod part_0 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                    let ok_result = parse_DefineStatement(state, tracer, cache)?;
                    Ok(ok_result.map(|result| Parsed { _override: Parsed__override::DefineStatement(result) }))
                }
                pub struct Parsed {
                    pub _override: Parsed__override,
                }
            }
            mod part_1 {
                use super::*;
                mod optional {
                    use super::*;
                    #[inline(always)]
                    pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                        let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                        let ok_result = parse_EOS(state, tracer, cache)?;
                        Ok(ok_result.map(|_| Parsed))
                    }
                    pub struct Parsed;
                }
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    match optional::parse(state.clone(), tracer, cache) {
                        Ok(ok_result) => Ok(ok_result.map(|result| Parsed {})),
                        Err(err) => Ok(ParseOk { result: Parsed {}, state, farthest_error: Some(err) }),
                    }
                }
                pub struct Parsed;
            }
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let mut state = state;
                let mut farthest_error: Option<ParseError> = None;
                let result = match part_0::parse(state, tracer, cache) {
                    Ok(ParseOk {
                        result,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                        state = new_state;
                        result
                    }
                    Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
                };
                let _override = result._override;
                match part_1::parse(state, tracer, cache) {
                    Ok(ParseOk {
                        result: _,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                        state = new_state;
                    }
                    Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
                }
                Ok(ParseOk { result: Parsed { _override }, state, farthest_error })
            }
            pub struct Parsed {
                pub _override: Parsed__override,
            }
        }
        mod choice_1 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_EmptyStatement(state, tracer, cache)?;
                Ok(ok_result.map(|result| Parsed { _override: Parsed__override::EmptyStatement(result) }))
            }
            pub struct Parsed {
                pub _override: Parsed__override,
            }
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            match choice_0::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed { _override: result._override })),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            match choice_1::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed { _override: result._override })),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            Err(farthest_error.unwrap_or_else(|| state.report_error(ParseErrorSpecifics::Other)))
        }
        pub struct Parsed {
            pub _override: Parsed__override,
        }
        use super::Statement as Parsed__override;
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::Statement> {
            let ok_result = parse(state, tracer, cache)?;
            Ok(ok_result.map(|result| result._override))
        }
    }
    #[inline]
    pub(super) fn parse_Statement<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Statement> {
        tracer.run_traced("Statement", state, |state, tracer| Statement_impl::rule_parser(state, tracer, cache))
    }
    mod EmptyStatement_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
            let ok_result = parse_EOS(state, tracer, cache)?;
            Ok(ok_result.map(|_| Parsed))
        }
        pub struct Parsed;
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::EmptyStatement> {
            let ok_result = parse(state, tracer, cache)?;
            Ok(ok_result.map(|r| super::EmptyStatement {}))
        }
    }
    #[inline]
    pub(super) fn parse_EmptyStatement<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, EmptyStatement> {
        tracer.run_traced("EmptyStatement", state, |state, tracer| EmptyStatement_impl::rule_parser(state, tracer, cache))
    }
    mod DefineStatement_impl {
        use super::*;
        mod part_0 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_DEFINE(state, tracer, cache)?;
                Ok(ok_result.map(|result| Parsed { define: result }))
            }
            pub struct Parsed {
                pub define: DEFINE,
            }
        }
        mod part_1 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_Modifiers(state, tracer, cache)?;
                Ok(ok_result.map(|result| Parsed { modifiers: result }))
            }
            pub struct Parsed {
                pub modifiers: Modifiers,
            }
        }
        mod part_2 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_Identifier(state, tracer, cache)?;
                Ok(ok_result.map(|result| Parsed { symbol: result }))
            }
            pub struct Parsed {
                pub symbol: Identifier,
            }
        }
        mod part_3 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_character_literal(state, '{')?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        mod part_4 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                let ok_result = parse_character_literal(state, '}')?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            let result = match part_0::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                    result
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            };
            let define = result.define;
            let result = match part_1::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                    result
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            };
            let modifiers = result.modifiers;
            let result = match part_2::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                    result
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            };
            let symbol = result.symbol;
            match part_3::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result: _,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            }
            match part_4::parse(state, tracer, cache) {
                Ok(ParseOk {
                    result: _,
                    state: new_state,
                    farthest_error: new_farthest_error,
                }) => {
                    farthest_error = combine_errors(farthest_error, new_farthest_error);
                    state = new_state;
                }
                Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
            }
            Ok(ParseOk {
                result: Parsed { define, modifiers, symbol },
                state,
                farthest_error,
            })
        }
        pub struct Parsed {
            pub define: DEFINE,
            pub modifiers: Modifiers,
            pub symbol: Identifier,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::DefineStatement> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|r, new_state| super::DefineStatement {
                define: r.define,
                modifiers: r.modifiers,
                symbol: r.symbol,
                position: state.range_until(new_state),
            }))
        }
    }
    #[inline]
    pub(super) fn parse_DefineStatement<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, DefineStatement> {
        tracer.run_traced("DefineStatement", state, |state, tracer| DefineStatement_impl::rule_parser(state, tracer, cache))
    }
    mod DEFINE_impl {
        use super::*;
        mod choice_0 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ok_result = parse_string_literal(state, "def!")?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        mod choice_1 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ok_result = parse_string_literal(state, "def")?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            match choice_0::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            match choice_1::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            Err(farthest_error.unwrap_or_else(|| state.report_error(ParseErrorSpecifics::Other)))
        }
        pub struct Parsed;
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, String> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|_, new_state| state.slice_until(new_state).to_string()))
        }
    }
    #[inline]
    pub(super) fn parse_DEFINE<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, DEFINE> {
        tracer.run_traced("DEFINE", state, |state, tracer| DEFINE_impl::rule_parser(state, tracer, cache))
    }
    mod EOS_impl {
        use super::*;
        mod choice_0 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ok_result = parse_string_literal(state, ";;")?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        mod choice_1 {
            use super::*;
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let ok_result = parse_character_literal(state, ';')?;
                Ok(ok_result.map(|_| Parsed))
            }
            pub struct Parsed;
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            match choice_0::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            match choice_1::parse(state.clone(), tracer, cache) {
                Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
            }
            Err(farthest_error.unwrap_or_else(|| state.report_error(ParseErrorSpecifics::Other)))
        }
        pub struct Parsed;
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, String> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|_, new_state| state.slice_until(new_state).to_string()))
        }
    }
    #[inline]
    pub(super) fn parse_EOS<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, EOS> {
        tracer.run_traced("EOS", state, |state, tracer| EOS_impl::rule_parser(state, tracer, cache))
    }
    mod Modifiers_impl {
        use super::*;
        mod closure {
            use super::*;
            mod part_0 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                    let ok_result = parse_Identifier(state, tracer, cache)?;
                    Ok(ok_result.map(|result| Parsed { id: vec![result] }))
                }
                pub struct Parsed {
                    pub id: Vec<Identifier>,
                }
            }
            mod part_1 {
                use super::*;
                mod negative_lookahead {
                    use super::*;
                    #[inline(always)]
                    pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                        let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
                        let ok_result = parse_character_literal(state, '{')?;
                        Ok(ok_result.map(|_| Parsed))
                    }
                    pub struct Parsed;
                }
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    match negative_lookahead::parse(state.clone(), tracer, cache) {
                        Ok(_) => Err(state.report_error(ParseErrorSpecifics::NegativeLookaheadFailed)),
                        Err(_) => Ok(ParseOk { result: Parsed, state, farthest_error: None }),
                    }
                }
                pub struct Parsed;
            }
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let mut state = state;
                let mut farthest_error: Option<ParseError> = None;
                let result = match part_0::parse(state, tracer, cache) {
                    Ok(ParseOk {
                        result,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                        state = new_state;
                        result
                    }
                    Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
                };
                let mut id = result.id;
                match part_1::parse(state, tracer, cache) {
                    Ok(ParseOk {
                        result: _,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                        state = new_state;
                    }
                    Err(err) => return Err(combine_errors(farthest_error, Some(err)).unwrap()),
                }
                Ok(ParseOk { result: Parsed { id }, state, farthest_error })
            }
            pub struct Parsed {
                pub id: Vec<Identifier>,
            }
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let mut id: Vec<Identifier> = Vec::new();
            let mut state = state;
            let mut farthest_error: Option<ParseError> = None;
            loop {
                match closure::parse(state.clone(), tracer, cache) {
                    Ok(ParseOk {
                        result,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        id.extend(result.id);
                        state = new_state;
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                    }
                    Err(err) => {
                        farthest_error = combine_errors(farthest_error, Some(err));
                        break;
                    }
                }
            }
            Ok(ParseOk { result: Parsed { id }, state, farthest_error })
        }
        pub struct Parsed {
            pub id: Vec<Identifier>,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::Modifiers> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|r, new_state| super::Modifiers { id: r.id, position: state.range_until(new_state) }))
        }
    }
    #[inline]
    pub(super) fn parse_Modifiers<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Modifiers> {
        tracer.run_traced("Modifiers", state, |state, tracer| Modifiers_impl::rule_parser(state, tracer, cache))
    }
    mod Identifier_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)?;
            let ok_result = parse_IDENTIFIER(state, tracer, cache)?;
            Ok(ok_result.map(|result| Parsed { identifier: result }))
        }
        pub struct Parsed {
            pub identifier: IDENTIFIER,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, super::Identifier> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|r, new_state| super::Identifier {
                identifier: r.identifier,
                position: state.range_until(new_state),
            }))
        }
    }
    #[inline]
    pub(super) fn parse_Identifier<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Identifier> {
        tracer.run_traced("Identifier", state, |state, tracer| Identifier_impl::rule_parser(state, tracer, cache))
    }
    mod IDENTIFIER_impl {
        use super::*;
        mod closure {
            use super::*;
            mod choice_0 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ok_result = parse_character_range(state, 'a', 'z')?;
                    Ok(ok_result.map(|_| Parsed))
                }
                pub struct Parsed;
            }
            mod choice_1 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ok_result = parse_character_range(state, 'A', 'Z')?;
                    Ok(ok_result.map(|_| Parsed))
                }
                pub struct Parsed;
            }
            mod choice_2 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ok_result = parse_character_literal(state, '_')?;
                    Ok(ok_result.map(|_| Parsed))
                }
                pub struct Parsed;
            }
            mod choice_3 {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                    let ok_result = parse_character_range(state, '0', '9')?;
                    Ok(ok_result.map(|_| Parsed))
                }
                pub struct Parsed;
            }
            #[inline(always)]
            pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
                let mut state = state;
                let mut farthest_error: Option<ParseError> = None;
                match choice_0::parse(state.clone(), tracer, cache) {
                    Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                    Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
                }
                match choice_1::parse(state.clone(), tracer, cache) {
                    Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                    Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
                }
                match choice_2::parse(state.clone(), tracer, cache) {
                    Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                    Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
                }
                match choice_3::parse(state.clone(), tracer, cache) {
                    Ok(ok_result) => return Ok(ok_result.map(|result| Parsed)),
                    Err(err) => farthest_error = combine_errors(farthest_error, Some(err)),
                }
                Err(farthest_error.unwrap_or_else(|| state.report_error(ParseErrorSpecifics::Other)))
            }
            pub struct Parsed;
        }
        #[inline(always)]
        pub fn parse<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, Parsed> {
            let ParseOk { result, mut state, mut farthest_error } = closure::parse(state, tracer, cache)?;
            loop {
                match closure::parse(state.clone(), tracer, cache) {
                    Ok(ParseOk {
                        result,
                        state: new_state,
                        farthest_error: new_farthest_error,
                    }) => {
                        state = new_state;
                        farthest_error = combine_errors(farthest_error, new_farthest_error);
                    }
                    Err(err) => {
                        farthest_error = combine_errors(farthest_error, Some(err));
                        break;
                    }
                }
            }
            Ok(ParseOk { result: Parsed {}, state, farthest_error })
        }
        pub struct Parsed;
        #[inline(always)]
        pub fn rule_parser<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, String> {
            let ok_result = parse(state.clone(), tracer, cache)?;
            Ok(ok_result.map_with_state(|_, new_state| state.slice_until(new_state).to_string()))
        }
    }
    #[inline]
    pub(super) fn parse_IDENTIFIER<'a>(state: ParseState<'a>, tracer: impl ParseTracer, cache: &mut ParseCache<'a>) -> ParseResult<'a, IDENTIFIER> {
        tracer.run_traced("IDENTIFIER", state, |state, tracer| IDENTIFIER_impl::rule_parser(state, tracer, cache))
    }
}
