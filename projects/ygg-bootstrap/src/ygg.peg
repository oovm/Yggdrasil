program  <- IGNORE (statement IGNORE)* EOI;

statement  <- empty_statement
    grammar:/ grammar_statement IGNORE eos?
    fragment:/ fragment_statement IGNORE eos?
    import:/ import_statement IGNORE eos?
    ignore:/ ignore_statement IGNORE eos?
    assign:/ assign_statement IGNORE eos?
    macro_def:/ macro_define IGNORE eos?
;

empty_statement <- eos;

eos  <- ";";


grammar_statement  <-
    grammar IGNORE symbol IGNORE "{" IGNORE (string IGNORE ("," IGNORE string)* IGNORE ","?)? IGNORE "}"
  / grammar IGNORE symbol IGNORE string?
;
grammar  <- "grammar!";

fragment_statement <- fragment IGNORE symbol;
fragment <- "fragment!";


import_statement  <-
    import IGNORE string IGNORE "{" IGNORE (symbol_alias IGNORE ("," IGNORE symbol_alias)* IGNORE ","?)? IGNORE "}"
  / import IGNORE string
;
import  <- "import!";

symbol_alias <- (symbol IGNORE "as" IGNORE)? symbol;

ignore_statement  <-
    ignore IGNORE symbol
  / ignore IGNORE "{" IGNORE (symbol IGNORE ("," IGNORE symbol)* IGNORE ","?)? IGNORE "}"
;
ignore  <- "ignore!";



assign_statement  <- symbol IGNORE assign_kind IGNORE ("|"/"/")? IGNORE expr;
assign_kind  <- ("^"/"_"/"@")* "=";

expr  <- term IGNORE (infix IGNORE term IGNORE)*;
term <-
    priority:/"(" IGNORE "/"? IGNORE expr IGNORE ")"
    atom:/ prefix* IGNORE data IGNORE (!"=" suffix/slice/mark_branch)*;

mark_branch  <- ("_"/"^"/"!"/"<"/">")? "#" symbol;
//mark_type  <- ":" IGNORE symbol;
infix   <- "|" / "/" / "~" / "<-"/ ":";
prefix  <- "!" / "&" / "^" / "*" / "%";
suffix  <- "?" / "+" / "-"/ "*";

data   <-
    macro:/macro_call
    regex:/ regex_range
    list:/ list
    symbol:/ symbol_path
    integer:/ integer
    string:/ string
;

list   <- "{" IGNORE (data IGNORE ("," IGNORE data)* IGNORE ","?)? IGNORE "}";
slice  <- "{" IGNORE integer IGNORE "," IGNORE integer IGNORE  "}";

regex_range  <- "[" IGNORE (!"]" IGNORE . / "\\" IGNORE .)* IGNORE "]";


macro_call  <-
    "@" symbol_path IGNORE "(" IGNORE (macro_kv IGNORE ("," IGNORE macro_kv)* IGNORE ","?)? IGNORE")"
;
macro_kv  <-  symbol IGNORE " <-" IGNORE expr / expr;



macro_define  <-
    "macro!" IGNORE symbol IGNORE  "(" IGNORE(macro_arg IGNORE ("," IGNORE macro_arg)* IGNORE ","?)? IGNORE ")" IGNORE block
;
macro_arg  <- symbol IGNORE (":" IGNORE symbol)? IGNORE ("=" IGNORE expr)?;
block  <- "{" IGNORE "return"? IGNORE expr IGNORE "}";


string  <-
    re#'([^\\']|\\.)*'#
  / re#"([^\\"]|\\.)*"#
;

integer  <- re#0|[1-9](_?[0-9])*#;

symbol_path  <-
    symbol IGNORE (("::"/".") IGNORE symbol)*
;
symbol  <- XID_IDENTIFIER;


IGNORE <-  (SPACE / NEWLINE / COMMENT)?;

SPACE <- re#[\s]+#;

NEWLINE <- re#[\r\n]+#;
COMMENT <- "//" re#[^\r\n]*#