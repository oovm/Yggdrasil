program  <- IGNORE (<statement:statement> IGNORE)* EOI;

statement  <- empty_statement
    Grammar:/ <grammar_statement:grammar_statement> IGNORE eos?
    Fragment:/ <fragment_statement:fragment_statement> IGNORE eos?
    Import:/ <import_statement:import_statement> IGNORE eos?
    Ignore:/ <ignore_statement:ignore_statement> IGNORE eos?
    Assign:/ <assign_statement:assign_statement> IGNORE eos?
    MacroCall:/ <macro_then:macro_then> IGNORE eos?
    MacroDef:/ <macro_define:macro_define> IGNORE eos?
;

empty_statement <- eos;

eos  <- ";";


grammar_statement  <-
    grammar IGNORE <id:symbol> IGNORE "{" IGNORE (<ext:string> IGNORE ("," IGNORE <ext:string>)* IGNORE ","?)? IGNORE "}"
  / grammar IGNORE <id:symbol> IGNORE <ext:string>?
;
grammar  <- "grammar!";

fragment_statement <- fragment IGNORE symbol;
fragment <- "fragment!";


import_statement  <-
    import IGNORE <string:string> IGNORE "{" IGNORE (symbol_alias IGNORE ("," IGNORE symbol_alias)* IGNORE ","?)? IGNORE "}"
  / import IGNORE <string:string>
;
import  <- "import!";

symbol_alias <- (symbol IGNORE "as" IGNORE)? symbol;

ignore_statement  <-
    ignore IGNORE <symbol:symbol>
  / ignore IGNORE "{" IGNORE (<symbol:symbol> IGNORE ("," IGNORE <symbol:symbol>)* IGNORE ","?)? IGNORE "}"
;
ignore  <- "ignore!";



assign_statement  <- <symbol:symbol> IGNORE <assign_kind:assign_kind> IGNORE ("|"/"/")? IGNORE expr;
assign_kind  <- ("^"/"_"/"@")* "=";

expr  <- term IGNORE (expr_next IGNORE)*;
expr_next <-
    infix:/ infix IGNORE term
    other:/ term IGNORE !"=";
term <-
    priority:/"(" IGNORE "/"? IGNORE expr IGNORE ")"
    atom:/ prefix* IGNORE data IGNORE (!assign_kind suffix/slice/mark_branch)*;

mark_branch  <- ("_"/"^"/"!"/"<"/">")? "$" symbol;
infix   <- "|" / "/" / "~" / "<-" / ":";
prefix  <- "!" / "&" / "^" / "%";
suffix  <- "?" / "+" / "-" / "*";

data   <-
    macro:/macro_call
    regex:/ regex_range
    list:/ list
    symbol:/ symbol_path
    integer:/ integer
    string:/ string
;

list   <- "{" IGNORE (data IGNORE ("," IGNORE data)* IGNORE ","?)? IGNORE "}";
slice  <- "{" IGNORE integer IGNORE "," IGNORE integer IGNORE  "}";

regex_range  <- "[" IGNORE (!"]" IGNORE . / "\\" IGNORE .)* IGNORE "]";


macro_call  <-
    "@" <symbol_path:symbol_path> IGNORE "(" IGNORE (macro_kv IGNORE ("," IGNORE macro_kv)* IGNORE ","?)? IGNORE")"
;
macro_then  <-
    "#" <symbol_path:symbol_path> (IGNORE "(" IGNORE (macro_kv IGNORE ("," IGNORE macro_kv)* IGNORE ","?)? IGNORE")")?
;
macro_kv  <-  symbol IGNORE " <-" IGNORE expr / expr;



macro_define  <-
    "macro!" IGNORE symbol IGNORE  "(" IGNORE(macro_arg IGNORE ("," IGNORE macro_arg)* IGNORE ","?)? IGNORE ")" IGNORE block
;
macro_arg  <- symbol IGNORE (":" IGNORE symbol)? IGNORE ("=" IGNORE expr)?;
block  <- "{" IGNORE expr IGNORE "}";


string  <-
    re#'([^\\']|\\.)*'#
  / re#"([^\\"]|\\.)*"#
;

integer  <- re#0|[1-9](_?[0-9])*#;

symbol_path  <-
    <symbol:symbol> IGNORE (("::"/".") IGNORE <symbol:symbol>)*
;
symbol  <- XID_IDENTIFIER;


IGNORE <-  (SPACE / NEWLINE / COMMENT)?;

SPACE <- re#[\s]+#;
NEWLINE <- re#[\r\n]+#;
COMMENT <- "//" re#[^\r\n]*#