grammar Bootstrap {

}

atomic entry class Root {
    (IGNORED Statement)*
}

union Statement {
    | GrammarStatement
    | ClassStatement
    | UnionStatement
    | GroupStatement
}
// === grammar === -----------------------------------------------------------------------------------------------------
class GrammarStatement {
    ^KW_GRAMMAR Identifier GrammarBlock
}
class GrammarBlock {
    '{' '}'
}
// === class === -----------------------------------------------------------------------------------------------------
class ClassStatement {
    Annotation ^KW_CLASS (name:Identifier) ('->' cast:Identifier)? ClassBlock
}
class ClassBlock {
    '{' Expression* '}'
}
// === union === -----------------------------------------------------------------------------------------------------
class UnionStatement {
    Annotation ^KW_UNION (name:Identifier) UnionBlock
}
atomic class UnionBlock {
    '{' (IGNORED UnionBranch)* '}'
}
class UnionBranch {
    '|' Expression BranchTag?
}
@style(field)
atomic class BranchTag {
    '#' Identifier RightAssociativity?
}
class RightAssociativity {
    '>'
}
// === group === -------------------------------------------------------------------------------------------------------
class GroupStatement {
    Annotation ^KW_GROUP Identifier? GroupBlock
}
class GroupBlock {
    '{' GroupPair* '}'
}
class GroupPair {
    Identifier ':' Atomic
}
// === annotations === -------------------------------------------------------------------------------------------------
class Annotation {
    (IGNORE AnnotationCall)* (IGNORE ModifierCall)*
}
class AnnotationCall {
    AnnotationName CallBody
}
@style(annotation)
class AnnotationName {
    [@#] Identifier
}
class FunctionCall {
    FunctionName Identifier CallBody
}
@style(function)
class FunctionName {
    [@] Identifier
}
class CallBody {
    '(' (Expression (',' Expression)* ','?)? ')'
}
// === expression === --------------------------------------------------------------------------------------------------
atomic class Expression {
    Term (Infix Term)*
}
class Term {
    (IGNORE Prefix)* Atomic (IGNORE Suffix)*
}
atomic union Infix {
    | IGNORE ':' IGNORE #Tag
    | IGNORE            #Soft
    | IGNORE '~' IGNORE #Hard
}
union Prefix {
    | '!' #Negative
    | '&' #Positive
    | '^' #Remark
}
union Suffix {
    | '?' #Negative
    | '*' #Positive
    | '+' #Remark
}
// === atoms === -------------------------------------------------------------------------------------------------------
union Atomic {
    | '(' Expression ')'
    | FunctionCall
    | Boolean
    | String
    | RegexEmbed
    | RegexRange
    | Identifier
}
// === String === -------------------------------------------------------------------------------------------------------
atomic union String {
    | "'" (!"'" ANY)* "'" #Raw
    | '"' (!'"' ANY)* '"' #Escaped
}
// === regex === -------------------------------------------------------------------------------------------------------
class RegexEmbed {
    '/' (!'/' ANY)* '/'
}
atomic class RegexRange {
    '[' RegexNegative? (!']' ANY)* ']'
}
class RegexNegative {
    '^'
}
// === identifier === --------------------------------------------------------------------------------------------------
class NamepathFree -> Namepath {
    Identifier (('.' | '::') Identifier)*
}
class Namepath {
    Identifier ('::' Identifier)*
}
class Identifier {
    /[_\p{XID_start}]\p{XID_continue}*/
}
union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === keywords === ----------------------------------------------------------------------------------------------------
atomic class ModifierCall ^ {
    !(KW_CLASS | KW_UNION | KW_GROUP | KW_MACRO | KW_CLIMB) ^Identifier
}
@style(keyword)
token {
    KW_GRAMMAR: /grammar/
    KW_IMPORT: /using|import|use/
    KW_CLASS: /class|struct/
    KW_UNION: /union|enum/
    KW_GROUP: /group|token/
    KW_CLIMB: /climb/
    KW_MACRO: /macro|def|function|func|fun|fn/
}
// === ignores === -----------------------------------------------------------------------------------------------------
ignore class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
atomic ignore union Comment {
    | '//' /[^\n\r]*/
    | '#'  /[^\n\r]*/
}
