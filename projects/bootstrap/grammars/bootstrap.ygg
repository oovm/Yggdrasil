grammar Bootstrap {

}

atomic entry class Root {
    (Statement (IGNORED Statement)*)?
}

union Statement {
    | GrammarStatements
    | ClassStatements
    | UnionStatements
    | GroupStatements
}
// === grammar === -----------------------------------------------------------------------------------------------------
class GrammarStatements {
    ^KW_GRAMMAR Identifier GrammarBlock
}
class GrammarBlock {
    '{' '}'
}
// === class === -----------------------------------------------------------------------------------------------------
class ClassStatements {
    Modifiers ^KW_CLASS Identifier ClassBlock
}
class ClassBlock {
    '{' Expression* '}'
}
// === union === -----------------------------------------------------------------------------------------------------
class UnionStatements {
    Modifiers ^KW_UNION Identifier UnionBlock
}
class UnionBlock {
    '{' (UnionBranch (IGNORED UnionBranch)*)? '}'
}
class UnionBranch {
    '|' Expression BranchTag?
}
@style(field)
atomic class BranchTag {
    '#' Identifier RightAssociativity?
}
class RightAssociativity {
    '>'
}
// === group === -------------------------------------------------------------------------------------------------------
class GroupStatements {
    Modifiers ^KW_GROUP Identifier? GroupBlock
}
class GroupBlock {
    '{' GroupPair* '}'
}
class GroupPair {
    Identifier ':' Atomic
}
// === expression === --------------------------------------------------------------------------------------------------
atomic class Expression {
    Term (Infix Term)*
}
class Term {
    (Prefix (IGNORE Prefix)*)? Atomic (Suffix (IGNORE Suffix)*)?
}
atomic union Infix {
    | IGNORE ':' IGNORE #Tag
    | IGNORE            #Soft
    | IGNORE '~' IGNORE #Hard
}
union Prefix {
    | '!' #Negative
    | '&' #Positive
    | '^' #Remark
}
union Suffix {
    | '?' #Negative
    | '*' #Positive
    | '+' #Remark
}
// === atoms === -------------------------------------------------------------------------------------------------------
union Atomic {
    | '(' Expression ')'
    | Identifier
    | Boolean
    | String
    | Regex
}
// === String === -------------------------------------------------------------------------------------------------------
atomic union String {
    | "'" (!"'" ANY)* "'" #Raw
    | '"' (!'"' ANY)* '"' #Escaped
}
// === regex === -------------------------------------------------------------------------------------------------------
atomic class Regex {
    '/' (!'/' ANY)* '/'
    '[' (!']' ANY)* ']'
}
// === identifier === --------------------------------------------------------------------------------------------------
class NamepathFree -> Namepath {
    Identifier (('.' | '::') Identifier)*
}
class Namepath {
    Identifier ('::' Identifier)*
}
class Identifier {
    /[_\p{XID_start}]\p{XID_continue}*/
}
union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === keywords === ----------------------------------------------------------------------------------------------------
atomic class Modifiers {
    (!(KW_CLASS | KW_UNION | KW_GROUP | KW_MACRO | KW_CLIMB) Identifier (IGNORED !(KW_CLASS | KW_UNION | KW_GROUP | KW_MACRO | KW_CLIMB) Identifier)*)?
}
@style(keyword)
token {
    KW_GRAMMAR: /grammar/
    KW_IMPORT: /using|import|use/
    KW_CLASS: /class|struct/
    KW_UNION: /union|enum/
    KW_GROUP: /group|token/
    KW_CLIMB: /climb/
    KW_MACRO: /macro|def|function|func|fun|fn/
}
// === ignores === -----------------------------------------------------------------------------------------------------
ignore class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
atomic ignore union Comment {
    | '//' /[^\n\r]*/
    | '#'  /[^\n\r]*/
}
