// wit/host.wit
package yggdrasil: json;

world host {
  import ast;
  import visitor;
  import listener;
}

interface ast {
  enum json-token {
    json,
    json-number,
    json-string,
    json-array
  }
  variant json-type {
    json(json),
    josn-number(json-number)
  }

  variant json {
    number(json-number),
    str(json-string),
    array(json-array)
  }
  record traversal-options {
    include-self: bool,
    include-leaf: bool,
    depth-first: bool,
  }

  record text-range {
    head: u32,
    tail: u32,
  }

  resource json-number {
    get-range: func() -> text-range;
    get-token: func() -> json-token;
    get-text: func() -> list<string>;
    get-ancestors: func(include-self: bool) -> list<json-type>;
    get-last: func(include-leaf: bool, include-self: bool) -> list<json-type>;
    get-next: func(include-leaf: bool, include-self: bool) -> list<json-type>;
    get-children: func(include-leaf: bool) -> list<json-type>;
    get-descendants: func(include-leaf: bool, depth-first: bool) -> list<json-type>;

    //     get-first
    //     get-siblings: func(include-leaf: bool) -> list<json-type>;


  }
  resource json-string {
    get-parent: func() -> json-type;
    get-token: func() -> json-token;
    get-text: func() -> list<string>;
  }

  resource json-array {
    get-rule: func() -> json-rule;
    get-text: func() -> list<string>;

    item: func() -> list<json>;
  }
}

interface visitor {

}

interface listener {

}


