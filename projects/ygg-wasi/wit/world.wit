// wit/host.wit
package yggdrasil: json;

world host {
  import ast;
  import visitor;
  import listener;
}

interface ast {
  record text-range {
    /// utf8 offset of the start
    head: u32,
      /// utf8 offset of the end
    tail: u32,
  }
  /// Token type of the language
  enum json-token {
    json,
    json-number,
    json-string,
    json-array
  }
  // Type erased node
  variant json-type {
    json(json-node),
    josn-number(json-number-node)
  }

  resource json-iterator {
    prev: func() -> option<json-type>;
    next: func() -> option<json-type>;
    skip: func(count: u32);
    move-head: func();
    move-tail: func();
    reverse: func();
  }

  // AST Types
  variant json-node {
    number(json-number-node),
    str(json-string),
    array(json-array)
  }



  resource json-number-node {
    is-leaf: func() -> bool;
    get-hash: func() -> u64;
    get-range: func() -> text-range;
    get-token: func() -> json-token;
    get-text: func() -> list<string>;
    get-ancestors: func(include-self: bool) -> json-iterator;
    get-prev: func(include-self: bool) -> json-iterator;
    get-next: func(include-self: bool) -> json-iterator;
    get-children: func() -> json-iterator;
    get-descendants: func(depth-first: bool) -> json-iterator;
  }
  resource json-string {

  }

  resource json-array {
    item: func() -> list<json-node>;
  }
}

interface visitor {

}

interface listener {

}


